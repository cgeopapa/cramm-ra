[{"F:\\Projects\\cramm-ra\\src\\index.tsx":"1","F:\\Projects\\cramm-ra\\src\\reportWebVitals.ts":"2","F:\\Projects\\cramm-ra\\src\\view\\AssetCartographyView.tsx":"3","F:\\Projects\\cramm-ra\\src\\dao\\FirebaseDAO.ts":"4","F:\\Projects\\cramm-ra\\src\\model\\Asset.ts":"5","F:\\Projects\\cramm-ra\\src\\model\\Category.ts":"6","F:\\Projects\\cramm-ra\\src\\controller\\CategoryController.ts":"7","F:\\Projects\\cramm-ra\\src\\controller\\AssetController.tsx":"8","F:\\Projects\\cramm-ra\\src\\model\\Owner.ts":"9","F:\\Projects\\cramm-ra\\src\\controller\\OwnerController.ts":"10","F:\\Projects\\cramm-ra\\src\\view\\HomeView.tsx":"11","F:\\Projects\\cramm-ra\\src\\view\\AssetEvaluationView.tsx":"12","F:\\Projects\\cramm-ra\\src\\view\\ThreadEvaluationView.tsx":"13","F:\\Projects\\cramm-ra\\src\\model\\Threat.ts":"14","F:\\Projects\\cramm-ra\\src\\controller\\ThreatController.ts":"15","F:\\Projects\\cramm-ra\\src\\model\\ThreatLevels.ts":"16","F:\\Projects\\cramm-ra\\src\\model\\VulLevels.ts":"17"},{"size":1049,"mtime":1609846600021,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":7959,"mtime":1609583148083,"results":"21","hashOfConfig":"19"},{"size":3834,"mtime":1610642089698,"results":"22","hashOfConfig":"19"},{"size":809,"mtime":1610631573041,"results":"23","hashOfConfig":"19"},{"size":189,"mtime":1608478322050,"results":"24","hashOfConfig":"19"},{"size":219,"mtime":1608398553172,"results":"25","hashOfConfig":"19"},{"size":1412,"mtime":1610630766239,"results":"26","hashOfConfig":"19"},{"size":219,"mtime":1608478330745,"results":"27","hashOfConfig":"19"},{"size":586,"mtime":1608478481720,"results":"28","hashOfConfig":"19"},{"size":2665,"mtime":1610567735962,"results":"29","hashOfConfig":"19"},{"size":7338,"mtime":1610630361683,"results":"30","hashOfConfig":"19"},{"size":7137,"mtime":1610642332421,"results":"31","hashOfConfig":"19"},{"size":353,"mtime":1610631713104,"results":"32","hashOfConfig":"19"},{"size":764,"mtime":1610641902813,"results":"33","hashOfConfig":"19"},{"size":91,"mtime":1610568222705,"results":"34","hashOfConfig":"19"},{"size":58,"mtime":1610568292536,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"lh7sin",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Projects\\cramm-ra\\src\\index.tsx",[],["73","74"],"F:\\Projects\\cramm-ra\\src\\reportWebVitals.ts",[],"F:\\Projects\\cramm-ra\\src\\view\\AssetCartographyView.tsx",["75"],"import 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primeflex/primeflex.css';\r\n\r\nimport React, { Component } from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Dropdown } from 'primereact/dropdown';\r\nimport { Button } from 'primereact/button';\r\nimport { OverlayPanel } from 'primereact/overlaypanel';\r\nimport AssetController from '../controller/AssetController';\r\nimport CategoryController from '../controller/CategoryController';\r\nimport Owner from '../model/Owner';\r\nimport OwnerContrller from '../controller/OwnerController';\r\n\r\nexport default class AssetCartographyView extends Component{\r\n    private assetsController = new AssetController();\r\n    private categoryController = new CategoryController();\r\n    private ownerController = new OwnerContrller();\r\n    private initialAsset: any;\r\n    private op: any;\r\n    state: any;\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n\r\n        this.state = {\r\n            assets: null,\r\n            categories: null,\r\n            owners: null,\r\n            editingOwner: new Owner(),\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        this.setState({\r\n            assets: await this.assetsController.getAssetsForEditTable(),\r\n            categories: await this.categoryController.getCategpries(),\r\n            owners: await this.ownerController.getOwners(),\r\n            loading: false\r\n        });\r\n\r\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\r\n        this.categoryTemplate = this.categoryTemplate.bind(this);\r\n    }\r\n\r\n    onRowEditInit(event: any){\r\n        this.initialAsset={...this.state.assets[event.index]};\r\n        this.setState({editingAsset: this.initialAsset});\r\n    }\r\n\r\n    onRowEditCancel(event: any) {\r\n        let assets = this.state.assets;\r\n        assets[event.index] = this.initialAsset;\r\n\r\n        this.setState({ assets: assets });\r\n    }\r\n\r\n    async onRowEditSave(event: any){\r\n        const res = await this.assetsController.updateAsset(this.state.editingAsset);\r\n        if(res){\r\n            this.reloadAssets();\r\n        }\r\n        else{\r\n            this.onRowEditCancel(event);\r\n        }\r\n    }\r\n\r\n    async onOwnerEditSave(owner: Owner){\r\n        const res = await this.ownerController.createOwner(owner);\r\n        if(res){\r\n            this.setState({owners: await this.ownerController.getOwners()});    \r\n            this.op.hide();\r\n        }\r\n    }\r\n\r\n    async reloadAssets(){\r\n        this.setState({loading: true});\r\n        this.setState({ \r\n            assets: await this.assetsController.getAssetsForEditTable(),\r\n            loading: false\r\n        });\r\n}\r\n\r\n    inputTextEditor(asset: any, field: string) {\r\n        return <InputText type=\"text\" placeholder={field} defaultValue={asset[field]}\r\n        onChange={(e) => this.state.editingAsset[field]=e.currentTarget.value}/>\r\n    }\r\n\r\n    inputCategoryEditor(asset: any) {\r\n        return (\r\n            <Dropdown optionLabel=\"name\" value={this.state.editingAsset.category} options={this.state.categories} \r\n            appendTo={document.body} placeholder=\"category\"\r\n            onChange={(e) => {\r\n                let editingAsset = this.state.editingAsset;\r\n                editingAsset.category = e.value;\r\n                this.setState({editingAsset: editingAsset})}}/>\r\n        )\r\n    }\r\n\r\n    inputLocationEditor(asset: any) {\r\n        return (\r\n            <Dropdown optionLabel=\"name\" optionValue=\"name\" value={this.state.editingAsset.location} options={this.state.assets}\r\n            appendTo={document.body} placeholder=\"location\"\r\n            onChange={(e) => {\r\n                let editingAsset = this.state.editingAsset;\r\n                editingAsset.location = e.value;\r\n                this.setState({editingAsset: editingAsset})}}/>\r\n        )\r\n    }\r\n    \r\n    inputOwnerEditor(asset: any) {\r\n        return (\r\n            <div style={{display:\"flex\", flexDirection:\"column\"}}>\r\n                <Dropdown optionLabel=\"name\" value={this.state.editingAsset.owner} options={this.state.owners} \r\n                appendTo={document.body} placeholder=\"owner\"\r\n                onChange={(e) => {\r\n                    let editingAsset = this.state.editingAsset;\r\n                    editingAsset.owner = e.value;\r\n                    this.setState({editingAsset: editingAsset})}}/> \r\n                <Button label=\"Create new owner\" className=\"p-button-text p-button-sm\" onClick={(e) => this.op.toggle(e)} />\r\n\r\n                <OverlayPanel showCloseIcon  ref={(el) => this.op = el}>\r\n                    <div style={{display:\"flex\", flexDirection:\"column\"}}>\r\n                        <h5>New owner</h5>\r\n                        <span className=\"p-float-label\">\r\n                            <InputText id=\"ownerName\" value={this.state.editingOwner.name}\r\n                            onChange={(e) => this.setState({editingOwner: {...this.state.editingOwner, name: e.currentTarget.value}})}/>\r\n                            <label htmlFor=\"ownerName\">Name</label>\r\n                        </span>\r\n                        <span className=\"p-float-label p-my-5\">\r\n                            <InputText id=\"ownerEmail\" value={this.state.editingOwner.email}\r\n                            onChange={(e) => this.setState({editingOwner: {...this.state.editingOwner, email: e.currentTarget.value}})}/>\r\n                            <label htmlFor=\"ownerEmail\">Email</label>\r\n                        </span>\r\n                        <div style={{display:\"flex\", flexDirection:\"row\", width:\"100%\"}}>\r\n                            <Button label=\"Create\" className=\"p-button-sm\" onClick={(e) => this.onOwnerEditSave(this.state.editingOwner)}/>\r\n                            <Button label=\"Cancel\" className=\"p-button-text p-button-sm\" onClick={(e) => this.op.hide()}/>\r\n                        </div>\r\n                    </div>\r\n                </OverlayPanel>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    categoryTemplate(asset: any){\r\n        return asset.category.name;\r\n    }\r\n\r\n    ownerTemplate(asset: any){\r\n        return (\r\n            <div>\r\n                <div className=\"p-text-normal\">{asset.owner.name}</div>\r\n                <div className=\"p-text-light\">{asset.owner.email}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render(){\r\n        const header = (\r\n            <h1 className=\"p-text-light p-m-0\">Asset Chartography tool</h1>\r\n        )\r\n        return (\r\n            <div style={{width:\"100%\", height:\"100%\"}} className=\"p-card\">\r\n                <DataTable loading={this.state.loading} value={this.state.assets} editMode=\"row\" sortMode=\"multiple\" className=\"p-datatable-striped\"\r\n                resizableColumns columnResizeMode=\"fit\" header={header}\r\n                onRowEditInit={(e) => this.onRowEditInit(e)} onRowEditCancel={(e) => this.onRowEditCancel(e)} onRowEditSave={(e) => this.onRowEditSave(e)}>\r\n                    <Column field=\"name\" header=\"Asset Name\" sortable editor={(e) => this.inputTextEditor(e.rowData, \"name\")}/>\r\n                    <Column field=\"description\" header=\"Description\" sortable editor={(e) => this.inputTextEditor(e.rowData, \"description\")}/>\r\n                    <Column field=\"category\" header=\"Category\" sortable body={this.categoryTemplate} editor={(e) => this.inputCategoryEditor(e.rowData)}/>\r\n                    <Column field=\"owner\" header=\"Owner\" sortable body={this.ownerTemplate} editor={(e) => this.inputOwnerEditor(e.rowData)}/>\r\n                    <Column field=\"location\" header=\"Location\" sortable editor={(e) => this.inputLocationEditor(e.rowData)}/>\r\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\r\n                </DataTable>\r\n            </div>\r\n        );\r\n    }\r\n}","F:\\Projects\\cramm-ra\\src\\dao\\FirebaseDAO.ts",[],"F:\\Projects\\cramm-ra\\src\\model\\Asset.ts",[],"F:\\Projects\\cramm-ra\\src\\model\\Category.ts",[],"F:\\Projects\\cramm-ra\\src\\controller\\CategoryController.ts",[],"F:\\Projects\\cramm-ra\\src\\controller\\AssetController.tsx",[],"F:\\Projects\\cramm-ra\\src\\model\\Owner.ts",[],"F:\\Projects\\cramm-ra\\src\\controller\\OwnerController.ts",["76"],"import FirebaseDAO from \"../dao/FirebaseDAO\";\r\nimport Owner from \"../model/Owner\";\r\n\r\nexport default class OwnerContrller{\r\n    dao = new FirebaseDAO();\r\n\r\n    public async getOwners(){\r\n        return await this.dao.getOwners();\r\n    }\r\n\r\n    public createOwner(owner: Owner){\r\n        const emailRegEx = /^\\S+\\@\\S+(\\.\\S*)+$/;\r\n        console.log(emailRegEx.test(owner.email));\r\n        if(owner.name.length > 0 && emailRegEx.test(owner.email)){\r\n            delete owner.id;\r\n            this.dao.addOwner(owner);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","F:\\Projects\\cramm-ra\\src\\view\\HomeView.tsx",[],"F:\\Projects\\cramm-ra\\src\\view\\AssetEvaluationView.tsx",[],"F:\\Projects\\cramm-ra\\src\\view\\ThreadEvaluationView.tsx",["77"],"F:\\Projects\\cramm-ra\\src\\model\\Threat.ts",[],"F:\\Projects\\cramm-ra\\src\\controller\\ThreatController.ts",[],"F:\\Projects\\cramm-ra\\src\\model\\ThreatLevels.ts",[],"F:\\Projects\\cramm-ra\\src\\model\\VulLevels.ts",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":90,"column":26,"nodeType":"84","endLine":90,"endColumn":49},{"ruleId":"85","severity":1,"message":"86","line":12,"column":33,"nodeType":"87","messageId":"88","endLine":12,"endColumn":34,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":11,"column":10,"nodeType":"92","messageId":"93","endLine":11,"endColumn":16},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-useless-escape","Unnecessary escape character: \\@.","Literal","unnecessaryEscape",["96","97"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"messageId":"98","fix":"99","desc":"100"},{"messageId":"101","fix":"102","desc":"103"},"removeEscape",{"range":"104","text":"105"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"106","text":"107"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[311,312],"",[311,311],"\\"]