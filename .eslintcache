[{"/mnt/f/Projects/cramm-ra/src/index.tsx":"1","/mnt/f/Projects/cramm-ra/src/reportWebVitals.ts":"2","/mnt/f/Projects/cramm-ra/src/view/HomeView.tsx":"3","/mnt/f/Projects/cramm-ra/src/view/AssetCartographyView.tsx":"4","/mnt/f/Projects/cramm-ra/src/view/AssetEvaluationView.tsx":"5","/mnt/f/Projects/cramm-ra/src/view/ThreadEvaluationView.tsx":"6","/mnt/f/Projects/cramm-ra/src/view/ResultTableView.tsx":"7","/mnt/f/Projects/cramm-ra/src/controller/OwnerController.ts":"8","/mnt/f/Projects/cramm-ra/src/model/VulLevels.ts":"9","/mnt/f/Projects/cramm-ra/src/model/Owner.ts":"10","/mnt/f/Projects/cramm-ra/src/controller/CategoryController.ts":"11","/mnt/f/Projects/cramm-ra/src/model/Scales.ts":"12","/mnt/f/Projects/cramm-ra/src/model/ThreatLevels.ts":"13","/mnt/f/Projects/cramm-ra/src/controller/ThreatController.ts":"14","/mnt/f/Projects/cramm-ra/src/controller/AssetController.tsx":"15","/mnt/f/Projects/cramm-ra/src/model/HazardScale.ts":"16","/mnt/f/Projects/cramm-ra/src/model/Threat.ts":"17","/mnt/f/Projects/cramm-ra/src/dao/FirebaseDAO.ts":"18","/mnt/f/Projects/cramm-ra/src/model/Asset.ts":"19","/mnt/f/Projects/cramm-ra/src/model/Category.ts":"20","/mnt/f/Projects/cramm-ra/src/model/CategoryThreat.ts":"21","/mnt/f/Projects/cramm-ra/src/view/TopMenuView.tsx":"22"},{"size":1166,"mtime":1612105273336,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1612105273354,"results":"25","hashOfConfig":"24"},{"size":2673,"mtime":1612538532524,"results":"26","hashOfConfig":"24"},{"size":9868,"mtime":1612870461372,"results":"27","hashOfConfig":"24"},{"size":8000,"mtime":1612808682627,"results":"28","hashOfConfig":"24"},{"size":10234,"mtime":1612808668909,"results":"29","hashOfConfig":"24"},{"size":8959,"mtime":1612808730253,"results":"30","hashOfConfig":"24"},{"size":566,"mtime":1612105273327,"results":"31","hashOfConfig":"24"},{"size":54,"mtime":1612105273354,"results":"32","hashOfConfig":"24"},{"size":209,"mtime":1612105273352,"results":"33","hashOfConfig":"24"},{"size":213,"mtime":1612105273327,"results":"34","hashOfConfig":"24"},{"size":1931,"mtime":1612802811089,"results":"35","hashOfConfig":"24"},{"size":85,"mtime":1612807715849,"results":"36","hashOfConfig":"24"},{"size":1138,"mtime":1612802721547,"results":"37","hashOfConfig":"24"},{"size":1552,"mtime":1612724101019,"results":"38","hashOfConfig":"24"},{"size":165,"mtime":1612105273352,"results":"39","hashOfConfig":"24"},{"size":342,"mtime":1612724183939,"results":"40","hashOfConfig":"24"},{"size":6655,"mtime":1612799053583,"results":"41","hashOfConfig":"24"},{"size":841,"mtime":1612720358959,"results":"42","hashOfConfig":"24"},{"size":273,"mtime":1612609629743,"results":"43","hashOfConfig":"24"},{"size":190,"mtime":1612799197963,"results":"44","hashOfConfig":"24"},{"size":844,"mtime":1612808611096,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1eizvzy",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/mnt/f/Projects/cramm-ra/src/index.tsx",[],["94","95"],"/mnt/f/Projects/cramm-ra/src/reportWebVitals.ts",[],"/mnt/f/Projects/cramm-ra/src/view/HomeView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/AssetCartographyView.tsx",["96","97","98"],"/mnt/f/Projects/cramm-ra/src/view/AssetEvaluationView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/ThreadEvaluationView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/ResultTableView.tsx",["99","100"],"import 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport {Component} from \"react\";\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {OverlayPanel} from 'primereact/overlaypanel';\nimport { Card } from 'primereact/card';\nimport ThreatController from \"../controller/ThreatController\";\nimport Threat from \"../model/Threat\";\nimport AssetController from \"../controller/AssetController\";\nimport Asset from \"../model/Asset\";\nimport {Button} from \"primereact/button\";\nimport {ThreatLevels} from \"../model/ThreatLevels\";\nimport {VulLevels} from \"../model/VulLevels\";\nimport Scales from \"../model/Scales\";\nimport Category from '../model/Category';\nimport CategoryThreat from '../model/CategoryThreat';\nimport TopMenuView from './TopMenuView';\n\nexport default class ResultTableView extends Component{\n    private threatController: ThreatController = new ThreatController();\n    private assetController: AssetController = new AssetController();\n    private scales: Scales = new Scales();\n\n    state: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            threats: null,\n            loading: true\n        }\n\n        this.assetEvac = this.assetEvac.bind(this);\n        this.economicRisk = this.economicRisk.bind(this);\n        this.hazardLevel = this.hazardLevel.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState({\n            threats: await this.threatController.getThreats(),\n            assets: await this.assetController.getAssets(),\n            loading: false\n        })\n    }\n\n    assetEvac(asset: Asset){\n        let op: any;\n        return(\n            <div className={\"p-d-flex p-ai-center\"}>\n                {this.assetController.getOverallScore(asset)}\n                <Button icon=\"pi pi-search\" className=\"p-button-rounded p-button-text p-mx-2\"\n                        onClick={(e) => op.toggle(e)}/>\n                <OverlayPanel showCloseIcon ref={(el) => op = el}>\n                    <div className={\"p-d-flex p-flex-column\"}>\n                        <table style={{width:\"auto\"}}>\n                            <tr>\n                                <th>Asset Evaluation Score</th>\n                                <th>{this.assetController.getOverallScore(asset)}</th>\n                            </tr>\n                            <tr>\n                                <td>Internal Reveal</td>\n                                <td>{asset.confInternal}</td>\n                            </tr>\n                            <tr>\n                                <td>External Reveal</td>\n                                <td>{asset.confExternal}</td>\n                            </tr>\n                            <tr>\n                                <th>Confidentiality Score</th>\n                                <th>{this.assetController.getConfidentialityScore(asset)}</th>\n                            </tr>\n                            <tr>\n                                <td>Some destruction</td>\n                                <td>{asset.intSome}</td>\n                            </tr>\n                            <tr>\n                                <td>Total destruction</td>\n                                <td>{asset.intTotal}</td>\n                            </tr>\n                            <tr>\n                                <th>Integrity Score</th>\n                                <th>{this.assetController.getIntegrityScore(asset)}</th>\n                            </tr>\n                            <tr>\n                                <td>30 minutes</td>\n                                <td>{asset.av30m}</td>\n                            </tr>\n                            <tr>\n                                <td>1 hour</td>\n                                <td>{asset.av1h}</td>\n                            </tr>\n                            <tr>\n                                <td>1 day</td>\n                                <td>{asset.av1d}</td>\n                            </tr>\n                            <tr>\n                                <td>2 days</td>\n                                <td>{asset.av2d}</td>\n                            </tr>\n                            <tr>\n                                <td>1 week</td>\n                                <td>{asset.av1w}</td>\n                            </tr>\n                            <tr>\n                                <td>1 month</td>\n                                <td>{asset.av1m}</td>\n                            </tr>\n                            <tr>\n                                <th>Availability Score</th>\n                                <th>{this.assetController.getAvailabilityScore(asset)}</th>\n                            </tr>\n                        </table>\n                    </div>\n                </OverlayPanel>\n            </div>\n        );\n        return (\"dd\")\n    }\n\n    threatLevel(threat: Threat){\n        return ThreatLevels[threat.threatLevel];\n    }\n\n    vulLevel(threat: Threat){\n        return VulLevels[threat.vulLevel];\n    }\n\n    economicRisk(asset: Asset){\n        let risk = 0;\n        for(let threat of asset.threats)\n        {\n            risk += this.scales.econLevelScale[this.assetController.getOverallScore(asset)] * this.threatController.getDangerLevel(threat)\n        }\n        return Math.round(risk);\n    }\n\n    hazardLevel(asset: Asset) {\n        return this.scales.getHazardScale(this.economicRisk(asset));\n    }\n\n    rowExpansionTemplate(asset: Asset){\n        return (\n            <div className=\"p-m-2\">\n                {asset.threats.map((threat: Threat) => {\n                    const categoryThreat = asset.category.threats.find((t: CategoryThreat) => t.id === threat.id) ?? new CategoryThreat();\n                    const act: string[] = [];\n                    const rec: string[] = [];\n                    for(let control of categoryThreat.controls){\n                        if(threat.controls.includes(control.id)){\n                            act.push(control.name);\n                        }\n                        else{\n                            rec.push(control.name);\n                        }\n                    }\n                    const header = (\n                        <div className=\"p-d-flex p-jc-between\">\n                            <span className=\"p-m-4\">{`Threat: ${threat.name}`}</span>\n                            <div className=\"p-m-4 p-d-flex p-flex-column\" style={{textAlign:\"end\"}}>\n                                <span>{`Threat Level: ${threat.threatLevel}`}</span>\n                                <span>{`Vulnerability Level: ${threat.vulLevel}`}</span>\n                            </div>\n                        </div>\n                    );\n                    return (\n                        <Card title={header} className=\"p-mb-4\">\n                            <div className=\"p-d-flex p-flex-column p-flex-md-row\" style={{width: \"100%\"}}>\n                                <Card title=\"Active Controls\" className=\"p-mx-2\" style={{width: \"100%\"}}>\n                                    <ul>\n                                        {act.map((control) => {\n                                            return <li>{control}</li>\n                                        })}\n                                    </ul>\n                                </Card>\n                                <Card title=\"Recommended Controls\" className=\"p-mx-2\" style={{width: \"100%\"}}>\n                                        {rec.map((control) => {\n                                            return <li>{control}</li>\n                                        })}\n                                </Card>\n                            </div>\n                        </Card>\n                    );\n                })}\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <div style={{width:\"100%\", height:\"100%\"}} className=\"card\">\n                <TopMenuView/>\n                <DataTable loading={this.state.loading} value={this.state.assets}\n                            rowExpansionTemplate={this.rowExpansionTemplate} expandedRows={this.state.expandedRows}\n                            onRowToggle={(e) => this.setState({expandedRows: e.data})}\n                            className=\"p-datatable-sm p-datatable-striped\">\n                    <Column expander style={{ width: '4em' }} />\n                    <Column field={\"name\"} header={\"Asset Name\"}/>\n                    <Column field={\"description\"} header={\"Asset Description\"}/>\n                    <Column body={this.assetEvac} header={\"Asset Evaluation Score\"}/>\n                    <Column body={this.economicRisk} header={\"Overall economic Risk\"}/>\n                    <Column body={this.hazardLevel} header={\"Level of Risk\"}/>\n                </DataTable>\n            </div>\n        );\n    }\n}\n","/mnt/f/Projects/cramm-ra/src/controller/OwnerController.ts",["101"],"import FirebaseDAO from \"../dao/FirebaseDAO\";\nimport Owner from \"../model/Owner\";\n\nexport default class OwnerContrller{\n    dao = new FirebaseDAO();\n\n    public async getOwners(){\n        return await this.dao.getOwners();\n    }\n\n    public createOwner(owner: Owner){\n        const emailRegEx = /^\\S+\\@\\S+(\\.\\S*)+$/;\n        console.log(emailRegEx.test(owner.email));\n        if(owner.name.length > 0 && emailRegEx.test(owner.email)){\n            delete owner.id;\n            this.dao.addOwner(owner);\n            return true;\n        }\n        return false;\n    }\n}","/mnt/f/Projects/cramm-ra/src/model/VulLevels.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Owner.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/CategoryController.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Scales.ts",[],"/mnt/f/Projects/cramm-ra/src/model/ThreatLevels.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/ThreatController.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/AssetController.tsx",[],"/mnt/f/Projects/cramm-ra/src/model/HazardScale.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Threat.ts",[],"/mnt/f/Projects/cramm-ra/src/dao/FirebaseDAO.ts",["102","103","104"],"import firebase from 'firebase'\nimport Asset from '../model/Asset';\nimport * as dotenv from 'dotenv';\nimport Category from '../model/Category';\nimport Owner from '../model/Owner';\nimport Threat from \"../model/Threat\";\nimport CategoryThreat from '../model/CategoryThreat';\n\nexport default class FirebaseDAO {\n    private app: firebase.app.App;\n    private db: firebase.database.Database;\n\n    constructor(){\n        dotenv.config();\n        const firebaseConfig = {\n            apiKey: process.env.REACT_APP_API_KEY,\n            authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n            databaseURL: process.env.REACT_APP_DATABASE_URL,\n            projectId: process.env.REACT_APP_PROJECT_ID,\n            storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n            messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n            appId: process.env.REACT_APP_APP_ID\n          };\n        \n        if(!firebase.apps.length){\n            this.app = firebase.initializeApp(firebaseConfig);\n        }\n        else {\n            this.app = firebase.app();\n        }\n        this.db = this.app.database();\n    }\n\n    async getOwners(){\n        let allOwners: Owner[] = [];\n        await this.db.ref(\"owners\").once(\"value\", snap => {\n            snap.forEach(owner => {\n                allOwners.push(new Owner(\n                    owner.val().name,\n                    owner.val().email,\n                    owner.key ?? ''\n                ))\n            })\n        })\n        return allOwners;\n    }\n\n    async addOwner(owner: Owner){\n        try{\n            const ref = await this.db.ref(\"owners\").push(owner);\n            return ref.key;\n        }\n        catch(e){\n            console.error(e);\n            return false;\n        }\n    }\n\n    async getCategories(){\n        let allCategories: Category[] = [];\n        await this.db.ref(\"category\").once(\"value\", snap => {\n            snap.forEach(category => {\n                let categoryThreats: CategoryThreat[] = [];\n                const threats = category.val().categiryThreats;\n                if(threats){\n                    for(let i in threats)\n                    {\n                        let categoryThreat = new CategoryThreat();\n                        categoryThreat.name = threats[i].name;\n                        categoryThreat.id = i;\n                        for(let j in threats[i].controls)\n                        {\n                            categoryThreat.controls.push({\n                                id: j,\n                                name: threats[i].controls[j]\n                            });\n                        }\n                        categoryThreats.push(categoryThreat);\n                    }\n                }\n\n                allCategories.push(new Category(\n                    category.val().name,\n                    categoryThreats,\n                    category.key ?? ''\n                ))\n            })\n        })\n        return allCategories;\n    }\n\n    async getCategory(id: string){\n        let retCategory = new Category();\n        await this.db.ref(\"category/\"+id).once(\"value\", category => {\n            let categoryThreats: CategoryThreat[] = new Array<CategoryThreat>();\n            const threats = category.val().categiryThreats;\n            if(threats){\n                for(let i in threats)\n                {\n                    let categoryThreat = new CategoryThreat();\n                    categoryThreat.name = threats[i].name;\n                    categoryThreat.id = i;\n                    for(let j in threats[i].controls)\n                    {\n                        categoryThreat.controls.push({\n                            id: j,\n                            name: threats[i].controls[j]\n                        });\n                    }\n                    categoryThreats.push(categoryThreat);\n                }\n            }\n\n            retCategory = new Category(\n                category.val().name,\n                categoryThreats,\n                category.key ?? ''\n            )\n        })\n        return retCategory;\n    }\n\n    async getAssets() {\n        let allAssets: Asset[] = [];\n        let js: any[] = [];\n        await this.db.ref(\"assets\").once(\"value\", snap => {\n            snap.forEach(asset => {\n                const a: Asset = asset.val();\n                a.id = asset.key ?? '';\n                js.push(a)\n            });\n        })\n        for(let asset of js){\n            asset.category = await this.getCategory(asset.category);\n            allAssets.push(asset);\n        }\n        return allAssets;\n    }\n\n    async addAsset(asset: Asset) {\n        try{\n            let toSaveAsset: any = asset;\n            toSaveAsset.category = asset.category.id;\n            const ref: any = await this.db.ref(\"assets\").push(toSaveAsset);\n            return ref.key;\n        }\n        catch(e){\n            return false;\n        }\n    }\n\n    async updateAsset(asset: Asset) {\n        try{\n            let assetCp: any = {...asset};\n            assetCp.category = asset.category.id;\n            await this.db.ref(`assets/${asset.id}`).set(assetCp);\n            return true;\n        }\n        catch(e){\n            console.error(e);\n            return false;\n        }\n    }\n\n    async getThreats(){\n        let allThreats: Threat[] = [];\n        let js: any[] = [];\n\n        await this.db.ref(\"threats\").once(\"value\", async snap => {\n            await snap.forEach(threat => {\n                js.push(threat);\n            })\n        });\n        for(let threat of js){\n            let asset: Asset = new Asset();\n            await this.db.ref(`assets/${threat.val().assetId}`).once(\"value\", snap => {\n                asset = snap.val();\n            });\n            let temp = threat.val();\n            delete temp.assetId;\n            const t: Threat = temp;\n            // t.asset = asset;\n            t.id = threat.key ?? '';\n            allThreats.push(t);\n        }\n        return allThreats;\n    }\n\n    async addThreat(threat: Threat){\n        try{\n            // let {asset, ...t} = threat;\n            // // @ts-ignore\n            // t[\"assetId\"] = asset.id;\n            // await this.db.ref(\"threats\").push(t);\n            return true;\n        }\n        catch (e){\n            console.error(e);\n            return false;\n        }\n    }\n\n    async updateThreat(threat: Threat){\n        try{\n            // let {asset, ...t} = threat;\n            // // @ts-ignore\n            // t[\"assetId\"] = asset.id;\n            // await this.db.ref(`threats/${threat.id}`).set(t);\n            return true;\n        }\n        catch (e){\n            console.error(e);\n            return false;\n        }\n    }\n}","/mnt/f/Projects/cramm-ra/src/model/Asset.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Category.ts",[],"/mnt/f/Projects/cramm-ra/src/model/CategoryThreat.ts",[],"/mnt/f/Projects/cramm-ra/src/view/TopMenuView.tsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":21,"column":8,"nodeType":"111","messageId":"112","endLine":21,"endColumn":13},{"ruleId":"109","severity":1,"message":"113","line":22,"column":10,"nodeType":"111","messageId":"112","endLine":22,"endColumn":14},{"ruleId":"114","severity":1,"message":"115","line":98,"column":26,"nodeType":"116","endLine":98,"endColumn":49},{"ruleId":"109","severity":1,"message":"117","line":19,"column":8,"nodeType":"111","messageId":"112","endLine":19,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":122,"column":9,"nodeType":"120","messageId":"121","endLine":122,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":12,"column":33,"nodeType":"124","messageId":"125","endLine":12,"endColumn":34,"suggestions":"126"},{"ruleId":"109","severity":1,"message":"127","line":177,"column":17,"nodeType":"111","messageId":"112","endLine":177,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":197,"column":18,"nodeType":"128","messageId":"121","endLine":200,"endColumn":10},{"ruleId":"118","severity":1,"message":"119","line":211,"column":18,"nodeType":"128","messageId":"121","endLine":214,"endColumn":10},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"@typescript-eslint/no-unused-vars","'Asset' is defined but never used.","Identifier","unusedVar","'link' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Category' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-useless-escape","Unnecessary escape character: \\@.","Literal","unnecessaryEscape",["131","132"],"'asset' is assigned a value but never used.","BlockStatement","no-global-assign","no-unsafe-negation",{"messageId":"133","fix":"134","desc":"135"},{"messageId":"136","fix":"137","desc":"138"},"removeEscape",{"range":"139","text":"140"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"141","text":"142"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[300,301],"",[300,300],"\\"]