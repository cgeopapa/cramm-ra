[{"/mnt/f/Projects/cramm-ra/src/index.tsx":"1","/mnt/f/Projects/cramm-ra/src/reportWebVitals.ts":"2","/mnt/f/Projects/cramm-ra/src/view/HomeView.tsx":"3","/mnt/f/Projects/cramm-ra/src/view/AssetCartographyView.tsx":"4","/mnt/f/Projects/cramm-ra/src/view/AssetEvaluationView.tsx":"5","/mnt/f/Projects/cramm-ra/src/view/ThreadEvaluationView.tsx":"6","/mnt/f/Projects/cramm-ra/src/view/ResultTableView.tsx":"7","/mnt/f/Projects/cramm-ra/src/controller/OwnerController.ts":"8","/mnt/f/Projects/cramm-ra/src/model/VulLevels.ts":"9","/mnt/f/Projects/cramm-ra/src/model/Owner.ts":"10","/mnt/f/Projects/cramm-ra/src/controller/CategoryController.ts":"11","/mnt/f/Projects/cramm-ra/src/model/Scales.ts":"12","/mnt/f/Projects/cramm-ra/src/model/ThreatLevels.ts":"13","/mnt/f/Projects/cramm-ra/src/controller/ThreatController.ts":"14","/mnt/f/Projects/cramm-ra/src/controller/AssetController.tsx":"15","/mnt/f/Projects/cramm-ra/src/model/HazardScale.ts":"16","/mnt/f/Projects/cramm-ra/src/model/Threat.ts":"17","/mnt/f/Projects/cramm-ra/src/dao/FirebaseDAO.ts":"18","/mnt/f/Projects/cramm-ra/src/model/Asset.ts":"19","/mnt/f/Projects/cramm-ra/src/model/Category.ts":"20","/mnt/f/Projects/cramm-ra/src/model/CategoryThreat.ts":"21","/mnt/f/Projects/cramm-ra/src/view/TopMenuView.tsx":"22"},{"size":1166,"mtime":1612105273336,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1612105273354,"results":"25","hashOfConfig":"24"},{"size":2674,"mtime":1613383206344,"results":"26","hashOfConfig":"24"},{"size":9868,"mtime":1612870461372,"results":"27","hashOfConfig":"24"},{"size":8001,"mtime":1613383255101,"results":"28","hashOfConfig":"24"},{"size":10234,"mtime":1613383228294,"results":"29","hashOfConfig":"24"},{"size":8959,"mtime":1612808730253,"results":"30","hashOfConfig":"24"},{"size":566,"mtime":1612105273327,"results":"31","hashOfConfig":"24"},{"size":54,"mtime":1612105273354,"results":"32","hashOfConfig":"24"},{"size":209,"mtime":1612105273352,"results":"33","hashOfConfig":"24"},{"size":213,"mtime":1612105273327,"results":"34","hashOfConfig":"24"},{"size":1931,"mtime":1612802811089,"results":"35","hashOfConfig":"24"},{"size":85,"mtime":1612807715849,"results":"36","hashOfConfig":"24"},{"size":1138,"mtime":1612802721547,"results":"37","hashOfConfig":"24"},{"size":1552,"mtime":1612724101019,"results":"38","hashOfConfig":"24"},{"size":165,"mtime":1612105273352,"results":"39","hashOfConfig":"24"},{"size":342,"mtime":1612724183939,"results":"40","hashOfConfig":"24"},{"size":6655,"mtime":1612799053583,"results":"41","hashOfConfig":"24"},{"size":841,"mtime":1612720358959,"results":"42","hashOfConfig":"24"},{"size":273,"mtime":1612609629743,"results":"43","hashOfConfig":"24"},{"size":190,"mtime":1612799197963,"results":"44","hashOfConfig":"24"},{"size":845,"mtime":1613383277925,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1eizvzy",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/mnt/f/Projects/cramm-ra/src/index.tsx",[],["96","97"],"/mnt/f/Projects/cramm-ra/src/reportWebVitals.ts",[],"/mnt/f/Projects/cramm-ra/src/view/HomeView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/AssetCartographyView.tsx",["98","99","100"],"import 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Button } from 'primereact/button';\nimport { OverlayPanel } from 'primereact/overlaypanel';\nimport { Tooltip } from 'primereact/tooltip';\nimport { TabView,TabPanel } from 'primereact/tabview';\nimport { Graph } from \"react-d3-graph\";\nimport AssetController from '../controller/AssetController';\nimport CategoryController from '../controller/CategoryController';\nimport Owner from '../model/Owner';\nimport OwnerContrller from '../controller/OwnerController';\nimport TopMenuView from './TopMenuView';\nimport Asset from '../model/Asset';\nimport { link } from 'fs';\n\nexport default class AssetCartographyView extends Component{\n    private assetsController = new AssetController();\n    private categoryController = new CategoryController();\n    private ownerController = new OwnerContrller();\n    private initialAsset: any;\n    private op: any;\n    state: any;\n\n    constructor(props: any){\n        super(props);\n\n        this.state = {\n            assets: null,\n            categories: null,\n            owners: null,\n            editingOwner: new Owner(),\n            loading: true,\n            data: {},\n            config: {},\n        }\n    }\n\n    async componentDidMount(){\n        this.setState({\n            assets: await this.assetsController.getAssetsForEditTable(),\n            categories: await this.categoryController.getCategpries(),\n            owners: await this.ownerController.getOwners(),\n            loading: false\n        });\n\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\n        this.categoryTemplate = this.categoryTemplate.bind(this);\n    }\n\n    onRowEditInit(event: any){\n        this.initialAsset={...this.state.assets[event.index]};\n        this.setState({editingAsset: this.initialAsset});\n    }\n\n    onRowEditCancel(event: any) {\n        let assets = this.state.assets;\n        assets[event.index] = this.initialAsset;\n\n        this.setState({ assets: assets });\n    }\n\n    async onRowEditSave(event: any){\n        const res = await this.assetsController.updateAsset(this.state.editingAsset);\n        if(res){\n            this.reloadAssets();\n        }\n        else{\n            this.onRowEditCancel(event);\n        }\n    }\n\n    async onOwnerEditSave(owner: Owner){\n        const res = await this.ownerController.createOwner(owner);\n        if(res){\n            this.setState({owners: await this.ownerController.getOwners()});    \n            this.op.hide();\n        }\n    }\n\n    async reloadAssets(){\n        this.setState({loading: true});\n        this.setState({ \n            assets: await this.assetsController.getAssetsForEditTable(),\n            loading: false\n        });\n}\n\n    inputTextEditor(asset: any, field: string) {\n        return <InputText type=\"text\" placeholder={field} defaultValue={asset[field]}\n        onChange={(e) => this.state.editingAsset[field]=e.currentTarget.value}/>\n    }\n\n    inputCategoryEditor(asset: any) {\n        return (\n            <Dropdown optionLabel=\"name\" value={this.state.editingAsset.category} options={this.state.categories} \n            appendTo={document.body} placeholder=\"category\"\n            onChange={(e) => {\n                let editingAsset = this.state.editingAsset;\n                editingAsset.category = e.value;\n                this.setState({editingAsset: editingAsset})}}/>\n        )\n    }\n\n    inputLocationEditor(asset: any) {\n        return (\n            <Dropdown optionLabel=\"name\" optionValue=\"name\" value={this.state.editingAsset.location} options={this.state.assets}\n            appendTo={document.body} placeholder=\"location\"\n            onChange={(e) => {\n                let editingAsset = this.state.editingAsset;\n                editingAsset.location = e.value;\n                this.setState({editingAsset: editingAsset})}}/>\n        )\n    }\n    \n    inputOwnerEditor(asset: any) {\n        return (\n            <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                <Dropdown optionLabel=\"name\" value={this.state.editingAsset.owner} options={this.state.owners} \n                appendTo={document.body} placeholder=\"owner\"\n                onChange={(e) => {\n                    let editingAsset = this.state.editingAsset;\n                    editingAsset.owner = e.value;\n                    this.setState({editingAsset: editingAsset})}}/> \n                <Button label=\"Create new owner\" className=\"p-button-text p-button-sm\" onClick={(e) => this.op.toggle(e)} />\n\n                <OverlayPanel showCloseIcon  ref={(el) => this.op = el}>\n                    <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                        <h5>New owner</h5>\n                        <span className=\"p-float-label\">\n                            <InputText id=\"ownerName\" value={this.state.editingOwner.name}\n                            onChange={(e) => this.setState({editingOwner: {...this.state.editingOwner, name: e.currentTarget.value}})}/>\n                            <label htmlFor=\"ownerName\">Name</label>\n                        </span>\n                        <span className=\"p-float-label p-my-5\">\n                            <InputText id=\"ownerEmail\" value={this.state.editingOwner.email}\n                            onChange={(e) => this.setState({editingOwner: {...this.state.editingOwner, email: e.currentTarget.value}})}/>\n                            <label htmlFor=\"ownerEmail\">Email</label>\n                        </span>\n                        <div style={{display:\"flex\", flexDirection:\"row\", width:\"100%\"}}>\n                            <Button label=\"Create\" className=\"p-button-sm\" onClick={(e) => this.onOwnerEditSave(this.state.editingOwner)}/>\n                            <Button label=\"Cancel\" className=\"p-button-text p-button-sm\" onClick={(e) => this.op.hide()}/>\n                        </div>\n                    </div>\n                </OverlayPanel>\n            </div>\n        )\n    }\n\n    categoryTemplate(asset: any){\n        return asset.category.name;\n    }\n\n    ownerTemplate(asset: any){\n        return (\n            <div>\n                <div className=\"p-text-normal\">{asset.owner.name}</div>\n                <div className=\"p-text-light\">{asset.owner.email}</div>\n            </div>\n        );\n    }\n\n    render(){\n        const header = (\n            <h1 className=\"p-text-light p-m-0\">Asset Chartography tool</h1>\n        )\n        const locationHeader = (\n            <div style={{width:\"auto\"}}>\n                <Tooltip target=\".customClassName\" mouseTrack mouseTrackLeft={10} />\n                <div className=\"customClassName\" data-pr-tooltip=\"Located/Installed/Saved at..\">Location</div>\n            </div>\n        )\n        const prepareGraph = (e: any) => {\n            const nodes = [];\n            const links = [];\n            for(let asset of this.state.assets){\n                if(asset.name){\n                    nodes.push({id: asset.name});\n                }\n                if(asset.location){\n                    links.push({source: asset.name, target: asset.location});\n                }\n            }\n            const data = {nodes: nodes, links: links};\n\n            const myConfig = {\n                nodeHighlightBehavior: true,\n                height: 640,\n                width: 2048,\n                node: {\n                  color: \"lightgreen\",\n                  size: 120,\n                  highlightStrokeColor: \"darkgreen\",\n                },\n                link: {\n                  highlightColor: \"lightblue\",\n                },\n            };\n            this.setState({activeIndex: e.index, data: data, config: myConfig});\n        }\n        return (\n            <div style={{width:\"100%\", height:\"100%\"}} className=\"p-card\">\n                <TopMenuView/>\n                <TabView activeIndex={this.state.activeIndex} onTabChange={prepareGraph}>\n                    <TabPanel header=\"Table\" leftIcon=\"pi pi-table\">\n                        <DataTable loading={this.state.loading} value={this.state.assets} editMode=\"row\" sortMode=\"multiple\" className=\"p-datatable-striped\"\n                        resizableColumns columnResizeMode=\"fit\" header={header}\n                        onRowEditInit={(e) => this.onRowEditInit(e)} onRowEditCancel={(e) => this.onRowEditCancel(e)} onRowEditSave={(e) => this.onRowEditSave(e)}>\n                            <Column field=\"name\" header=\"Asset Name\" editor={(e) => this.inputTextEditor(e.rowData, \"name\")}/>\n                            <Column field=\"description\" header=\"Description\" editor={(e) => this.inputTextEditor(e.rowData, \"description\")}/>\n                            <Column field=\"category\" header=\"Category\" body={this.categoryTemplate} editor={(e) => this.inputCategoryEditor(e.rowData)}/>\n                            <Column field=\"owner\" header=\"Owner\" body={this.ownerTemplate} editor={(e) => this.inputOwnerEditor(e.rowData)}/>\n                            <Column field=\"location\" header={locationHeader} editor={(e) => this.inputLocationEditor(e.rowData)}/>\n                            <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\n                        </DataTable>\n                    </TabPanel>\n                    <TabPanel header=\"Graph\" leftIcon=\"pi pi-share-alt\">\n                        <div>\n                            <Graph id=\"graph-id\" data={this.state.data} config={this.state.config}/>\n                        </div>\n                    </TabPanel>\n                </TabView>\n            </div>\n        );\n    }\n}","/mnt/f/Projects/cramm-ra/src/view/AssetEvaluationView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/ThreadEvaluationView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/ResultTableView.tsx",["101","102"],"import 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport {Component} from \"react\";\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {OverlayPanel} from 'primereact/overlaypanel';\nimport { Card } from 'primereact/card';\nimport ThreatController from \"../controller/ThreatController\";\nimport Threat from \"../model/Threat\";\nimport AssetController from \"../controller/AssetController\";\nimport Asset from \"../model/Asset\";\nimport {Button} from \"primereact/button\";\nimport {ThreatLevels} from \"../model/ThreatLevels\";\nimport {VulLevels} from \"../model/VulLevels\";\nimport Scales from \"../model/Scales\";\nimport Category from '../model/Category';\nimport CategoryThreat from '../model/CategoryThreat';\nimport TopMenuView from './TopMenuView';\n\nexport default class ResultTableView extends Component{\n    private threatController: ThreatController = new ThreatController();\n    private assetController: AssetController = new AssetController();\n    private scales: Scales = new Scales();\n\n    state: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            threats: null,\n            loading: true\n        }\n\n        this.assetEvac = this.assetEvac.bind(this);\n        this.economicRisk = this.economicRisk.bind(this);\n        this.hazardLevel = this.hazardLevel.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState({\n            threats: await this.threatController.getThreats(),\n            assets: await this.assetController.getAssets(),\n            loading: false\n        })\n    }\n\n    assetEvac(asset: Asset){\n        let op: any;\n        return(\n            <div className={\"p-d-flex p-ai-center\"}>\n                {this.assetController.getOverallScore(asset)}\n                <Button icon=\"pi pi-search\" className=\"p-button-rounded p-button-text p-mx-2\"\n                        onClick={(e) => op.toggle(e)}/>\n                <OverlayPanel showCloseIcon ref={(el) => op = el}>\n                    <div className={\"p-d-flex p-flex-column\"}>\n                        <table style={{width:\"auto\"}}>\n                            <tr>\n                                <th>Asset Evaluation Score</th>\n                                <th>{this.assetController.getOverallScore(asset)}</th>\n                            </tr>\n                            <tr>\n                                <td>Internal Reveal</td>\n                                <td>{asset.confInternal}</td>\n                            </tr>\n                            <tr>\n                                <td>External Reveal</td>\n                                <td>{asset.confExternal}</td>\n                            </tr>\n                            <tr>\n                                <th>Confidentiality Score</th>\n                                <th>{this.assetController.getConfidentialityScore(asset)}</th>\n                            </tr>\n                            <tr>\n                                <td>Some destruction</td>\n                                <td>{asset.intSome}</td>\n                            </tr>\n                            <tr>\n                                <td>Total destruction</td>\n                                <td>{asset.intTotal}</td>\n                            </tr>\n                            <tr>\n                                <th>Integrity Score</th>\n                                <th>{this.assetController.getIntegrityScore(asset)}</th>\n                            </tr>\n                            <tr>\n                                <td>30 minutes</td>\n                                <td>{asset.av30m}</td>\n                            </tr>\n                            <tr>\n                                <td>1 hour</td>\n                                <td>{asset.av1h}</td>\n                            </tr>\n                            <tr>\n                                <td>1 day</td>\n                                <td>{asset.av1d}</td>\n                            </tr>\n                            <tr>\n                                <td>2 days</td>\n                                <td>{asset.av2d}</td>\n                            </tr>\n                            <tr>\n                                <td>1 week</td>\n                                <td>{asset.av1w}</td>\n                            </tr>\n                            <tr>\n                                <td>1 month</td>\n                                <td>{asset.av1m}</td>\n                            </tr>\n                            <tr>\n                                <th>Availability Score</th>\n                                <th>{this.assetController.getAvailabilityScore(asset)}</th>\n                            </tr>\n                        </table>\n                    </div>\n                </OverlayPanel>\n            </div>\n        );\n        return (\"dd\")\n    }\n\n    threatLevel(threat: Threat){\n        return ThreatLevels[threat.threatLevel];\n    }\n\n    vulLevel(threat: Threat){\n        return VulLevels[threat.vulLevel];\n    }\n\n    economicRisk(asset: Asset){\n        let risk = 0;\n        for(let threat of asset.threats)\n        {\n            risk += this.scales.econLevelScale[this.assetController.getOverallScore(asset)] * this.threatController.getDangerLevel(threat)\n        }\n        return Math.round(risk);\n    }\n\n    hazardLevel(asset: Asset) {\n        return this.scales.getHazardScale(this.economicRisk(asset));\n    }\n\n    rowExpansionTemplate(asset: Asset){\n        return (\n            <div className=\"p-m-2\">\n                {asset.threats.map((threat: Threat) => {\n                    const categoryThreat = asset.category.threats.find((t: CategoryThreat) => t.id === threat.id) ?? new CategoryThreat();\n                    const act: string[] = [];\n                    const rec: string[] = [];\n                    for(let control of categoryThreat.controls){\n                        if(threat.controls.includes(control.id)){\n                            act.push(control.name);\n                        }\n                        else{\n                            rec.push(control.name);\n                        }\n                    }\n                    const header = (\n                        <div className=\"p-d-flex p-jc-between\">\n                            <span className=\"p-m-4\">{`Threat: ${threat.name}`}</span>\n                            <div className=\"p-m-4 p-d-flex p-flex-column\" style={{textAlign:\"end\"}}>\n                                <span>{`Threat Level: ${threat.threatLevel}`}</span>\n                                <span>{`Vulnerability Level: ${threat.vulLevel}`}</span>\n                            </div>\n                        </div>\n                    );\n                    return (\n                        <Card title={header} className=\"p-mb-4\">\n                            <div className=\"p-d-flex p-flex-column p-flex-md-row\" style={{width: \"100%\"}}>\n                                <Card title=\"Active Controls\" className=\"p-mx-2\" style={{width: \"100%\"}}>\n                                    <ul>\n                                        {act.map((control) => {\n                                            return <li>{control}</li>\n                                        })}\n                                    </ul>\n                                </Card>\n                                <Card title=\"Recommended Controls\" className=\"p-mx-2\" style={{width: \"100%\"}}>\n                                        {rec.map((control) => {\n                                            return <li>{control}</li>\n                                        })}\n                                </Card>\n                            </div>\n                        </Card>\n                    );\n                })}\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <div style={{width:\"100%\", height:\"100%\"}} className=\"card\">\n                <TopMenuView/>\n                <DataTable loading={this.state.loading} value={this.state.assets}\n                            rowExpansionTemplate={this.rowExpansionTemplate} expandedRows={this.state.expandedRows}\n                            onRowToggle={(e) => this.setState({expandedRows: e.data})}\n                            className=\"p-datatable-sm p-datatable-striped\">\n                    <Column expander style={{ width: '4em' }} />\n                    <Column field={\"name\"} header={\"Asset Name\"}/>\n                    <Column field={\"description\"} header={\"Asset Description\"}/>\n                    <Column body={this.assetEvac} header={\"Asset Evaluation Score\"}/>\n                    <Column body={this.economicRisk} header={\"Overall economic Risk\"}/>\n                    <Column body={this.hazardLevel} header={\"Level of Risk\"}/>\n                </DataTable>\n            </div>\n        );\n    }\n}\n","/mnt/f/Projects/cramm-ra/src/controller/OwnerController.ts",["103"],"import FirebaseDAO from \"../dao/FirebaseDAO\";\nimport Owner from \"../model/Owner\";\n\nexport default class OwnerContrller{\n    dao = new FirebaseDAO();\n\n    public async getOwners(){\n        return await this.dao.getOwners();\n    }\n\n    public createOwner(owner: Owner){\n        const emailRegEx = /^\\S+\\@\\S+(\\.\\S*)+$/;\n        console.log(emailRegEx.test(owner.email));\n        if(owner.name.length > 0 && emailRegEx.test(owner.email)){\n            delete owner.id;\n            this.dao.addOwner(owner);\n            return true;\n        }\n        return false;\n    }\n}","/mnt/f/Projects/cramm-ra/src/model/VulLevels.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Owner.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/CategoryController.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Scales.ts",[],"/mnt/f/Projects/cramm-ra/src/model/ThreatLevels.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/ThreatController.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/AssetController.tsx",[],"/mnt/f/Projects/cramm-ra/src/model/HazardScale.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Threat.ts",[],"/mnt/f/Projects/cramm-ra/src/dao/FirebaseDAO.ts",["104","105","106"],"import firebase from 'firebase'\nimport Asset from '../model/Asset';\nimport * as dotenv from 'dotenv';\nimport Category from '../model/Category';\nimport Owner from '../model/Owner';\nimport Threat from \"../model/Threat\";\nimport CategoryThreat from '../model/CategoryThreat';\n\nexport default class FirebaseDAO {\n    private app: firebase.app.App;\n    private db: firebase.database.Database;\n\n    constructor(){\n        dotenv.config();\n        const firebaseConfig = {\n            apiKey: process.env.REACT_APP_API_KEY,\n            authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n            databaseURL: process.env.REACT_APP_DATABASE_URL,\n            projectId: process.env.REACT_APP_PROJECT_ID,\n            storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n            messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n            appId: process.env.REACT_APP_APP_ID\n          };\n        \n        if(!firebase.apps.length){\n            this.app = firebase.initializeApp(firebaseConfig);\n        }\n        else {\n            this.app = firebase.app();\n        }\n        this.db = this.app.database();\n    }\n\n    async getOwners(){\n        let allOwners: Owner[] = [];\n        await this.db.ref(\"owners\").once(\"value\", snap => {\n            snap.forEach(owner => {\n                allOwners.push(new Owner(\n                    owner.val().name,\n                    owner.val().email,\n                    owner.key ?? ''\n                ))\n            })\n        })\n        return allOwners;\n    }\n\n    async addOwner(owner: Owner){\n        try{\n            const ref = await this.db.ref(\"owners\").push(owner);\n            return ref.key;\n        }\n        catch(e){\n            console.error(e);\n            return false;\n        }\n    }\n\n    async getCategories(){\n        let allCategories: Category[] = [];\n        await this.db.ref(\"category\").once(\"value\", snap => {\n            snap.forEach(category => {\n                let categoryThreats: CategoryThreat[] = [];\n                const threats = category.val().categiryThreats;\n                if(threats){\n                    for(let i in threats)\n                    {\n                        let categoryThreat = new CategoryThreat();\n                        categoryThreat.name = threats[i].name;\n                        categoryThreat.id = i;\n                        for(let j in threats[i].controls)\n                        {\n                            categoryThreat.controls.push({\n                                id: j,\n                                name: threats[i].controls[j]\n                            });\n                        }\n                        categoryThreats.push(categoryThreat);\n                    }\n                }\n\n                allCategories.push(new Category(\n                    category.val().name,\n                    categoryThreats,\n                    category.key ?? ''\n                ))\n            })\n        })\n        return allCategories;\n    }\n\n    async getCategory(id: string){\n        let retCategory = new Category();\n        await this.db.ref(\"category/\"+id).once(\"value\", category => {\n            let categoryThreats: CategoryThreat[] = new Array<CategoryThreat>();\n            const threats = category.val().categiryThreats;\n            if(threats){\n                for(let i in threats)\n                {\n                    let categoryThreat = new CategoryThreat();\n                    categoryThreat.name = threats[i].name;\n                    categoryThreat.id = i;\n                    for(let j in threats[i].controls)\n                    {\n                        categoryThreat.controls.push({\n                            id: j,\n                            name: threats[i].controls[j]\n                        });\n                    }\n                    categoryThreats.push(categoryThreat);\n                }\n            }\n\n            retCategory = new Category(\n                category.val().name,\n                categoryThreats,\n                category.key ?? ''\n            )\n        })\n        return retCategory;\n    }\n\n    async getAssets() {\n        let allAssets: Asset[] = [];\n        let js: any[] = [];\n        await this.db.ref(\"assets\").once(\"value\", snap => {\n            snap.forEach(asset => {\n                const a: Asset = asset.val();\n                a.id = asset.key ?? '';\n                js.push(a)\n            });\n        })\n        for(let asset of js){\n            asset.category = await this.getCategory(asset.category);\n            allAssets.push(asset);\n        }\n        return allAssets;\n    }\n\n    async addAsset(asset: Asset) {\n        try{\n            let toSaveAsset: any = asset;\n            toSaveAsset.category = asset.category.id;\n            const ref: any = await this.db.ref(\"assets\").push(toSaveAsset);\n            return ref.key;\n        }\n        catch(e){\n            return false;\n        }\n    }\n\n    async updateAsset(asset: Asset) {\n        try{\n            let assetCp: any = {...asset};\n            assetCp.category = asset.category.id;\n            await this.db.ref(`assets/${asset.id}`).set(assetCp);\n            return true;\n        }\n        catch(e){\n            console.error(e);\n            return false;\n        }\n    }\n\n    async getThreats(){\n        let allThreats: Threat[] = [];\n        let js: any[] = [];\n\n        await this.db.ref(\"threats\").once(\"value\", async snap => {\n            await snap.forEach(threat => {\n                js.push(threat);\n            })\n        });\n        for(let threat of js){\n            let asset: Asset = new Asset();\n            await this.db.ref(`assets/${threat.val().assetId}`).once(\"value\", snap => {\n                asset = snap.val();\n            });\n            let temp = threat.val();\n            delete temp.assetId;\n            const t: Threat = temp;\n            // t.asset = asset;\n            t.id = threat.key ?? '';\n            allThreats.push(t);\n        }\n        return allThreats;\n    }\n\n    async addThreat(threat: Threat){\n        try{\n            // let {asset, ...t} = threat;\n            // // @ts-ignore\n            // t[\"assetId\"] = asset.id;\n            // await this.db.ref(\"threats\").push(t);\n            return true;\n        }\n        catch (e){\n            console.error(e);\n            return false;\n        }\n    }\n\n    async updateThreat(threat: Threat){\n        try{\n            // let {asset, ...t} = threat;\n            // // @ts-ignore\n            // t[\"assetId\"] = asset.id;\n            // await this.db.ref(`threats/${threat.id}`).set(t);\n            return true;\n        }\n        catch (e){\n            console.error(e);\n            return false;\n        }\n    }\n}","/mnt/f/Projects/cramm-ra/src/model/Asset.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Category.ts",[],["107","108"],"/mnt/f/Projects/cramm-ra/src/model/CategoryThreat.ts",[],"/mnt/f/Projects/cramm-ra/src/view/TopMenuView.tsx",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":21,"column":8,"nodeType":"115","messageId":"116","endLine":21,"endColumn":13},{"ruleId":"113","severity":1,"message":"117","line":22,"column":10,"nodeType":"115","messageId":"116","endLine":22,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":98,"column":26,"nodeType":"120","endLine":98,"endColumn":49},{"ruleId":"113","severity":1,"message":"121","line":19,"column":8,"nodeType":"115","messageId":"116","endLine":19,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":122,"column":9,"nodeType":"124","messageId":"125","endLine":122,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":12,"column":33,"nodeType":"128","messageId":"129","endLine":12,"endColumn":34,"suggestions":"130"},{"ruleId":"113","severity":1,"message":"131","line":177,"column":17,"nodeType":"115","messageId":"116","endLine":177,"endColumn":22},{"ruleId":"122","severity":1,"message":"123","line":197,"column":18,"nodeType":"132","messageId":"125","endLine":200,"endColumn":10},{"ruleId":"122","severity":1,"message":"123","line":211,"column":18,"nodeType":"132","messageId":"125","endLine":214,"endColumn":10},{"ruleId":"109","replacedBy":"133"},{"ruleId":"111","replacedBy":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"@typescript-eslint/no-unused-vars","'Asset' is defined but never used.","Identifier","unusedVar","'link' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Category' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-useless-escape","Unnecessary escape character: \\@.","Literal","unnecessaryEscape",["137","138"],"'asset' is assigned a value but never used.","BlockStatement",["135"],["136"],"no-global-assign","no-unsafe-negation",{"messageId":"139","fix":"140","desc":"141"},{"messageId":"142","fix":"143","desc":"144"},"removeEscape",{"range":"145","text":"146"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"147","text":"148"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[300,301],"",[300,300],"\\"]