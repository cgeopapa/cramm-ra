[{"/mnt/f/Projects/cramm-ra/src/index.tsx":"1","/mnt/f/Projects/cramm-ra/src/reportWebVitals.ts":"2","/mnt/f/Projects/cramm-ra/src/view/HomeView.tsx":"3","/mnt/f/Projects/cramm-ra/src/view/AssetCartographyView.tsx":"4","/mnt/f/Projects/cramm-ra/src/view/AssetEvaluationView.tsx":"5","/mnt/f/Projects/cramm-ra/src/view/ThreadEvaluationView.tsx":"6","/mnt/f/Projects/cramm-ra/src/view/ResultTableView.tsx":"7","/mnt/f/Projects/cramm-ra/src/controller/OwnerController.ts":"8","/mnt/f/Projects/cramm-ra/src/model/VulLevels.ts":"9","/mnt/f/Projects/cramm-ra/src/model/Owner.ts":"10","/mnt/f/Projects/cramm-ra/src/controller/CategoryController.ts":"11","/mnt/f/Projects/cramm-ra/src/model/Scales.ts":"12","/mnt/f/Projects/cramm-ra/src/model/ThreatLevels.ts":"13","/mnt/f/Projects/cramm-ra/src/controller/ThreatController.ts":"14","/mnt/f/Projects/cramm-ra/src/controller/AssetController.tsx":"15","/mnt/f/Projects/cramm-ra/src/model/HazardScale.ts":"16","/mnt/f/Projects/cramm-ra/src/model/Threat.ts":"17","/mnt/f/Projects/cramm-ra/src/dao/FirebaseDAO.ts":"18","/mnt/f/Projects/cramm-ra/src/model/Asset.ts":"19","/mnt/f/Projects/cramm-ra/src/model/Category.ts":"20","/mnt/f/Projects/cramm-ra/src/model/CategoryThreat.ts":"21"},{"size":1166,"mtime":1612105273336,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1612105273354,"results":"24","hashOfConfig":"23"},{"size":2673,"mtime":1612538532524,"results":"25","hashOfConfig":"23"},{"size":8085,"mtime":1612546218475,"results":"26","hashOfConfig":"23"},{"size":7928,"mtime":1612545393929,"results":"27","hashOfConfig":"23"},{"size":10630,"mtime":1612798350685,"results":"28","hashOfConfig":"23"},{"size":6250,"mtime":1612720941961,"results":"29","hashOfConfig":"23"},{"size":566,"mtime":1612105273327,"results":"30","hashOfConfig":"23"},{"size":54,"mtime":1612105273354,"results":"31","hashOfConfig":"23"},{"size":209,"mtime":1612105273352,"results":"32","hashOfConfig":"23"},{"size":213,"mtime":1612105273327,"results":"33","hashOfConfig":"23"},{"size":1895,"mtime":1612105273352,"results":"34","hashOfConfig":"23"},{"size":85,"mtime":1612105273353,"results":"35","hashOfConfig":"23"},{"size":1226,"mtime":1612720785203,"results":"36","hashOfConfig":"23"},{"size":1552,"mtime":1612724101019,"results":"37","hashOfConfig":"23"},{"size":165,"mtime":1612105273352,"results":"38","hashOfConfig":"23"},{"size":342,"mtime":1612724183939,"results":"39","hashOfConfig":"23"},{"size":6655,"mtime":1612799053583,"results":"40","hashOfConfig":"23"},{"size":841,"mtime":1612720358959,"results":"41","hashOfConfig":"23"},{"size":273,"mtime":1612609629743,"results":"42","hashOfConfig":"23"},{"size":190,"mtime":1612799197963,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1eizvzy",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/f/Projects/cramm-ra/src/index.tsx",[],["90","91"],"/mnt/f/Projects/cramm-ra/src/reportWebVitals.ts",[],"/mnt/f/Projects/cramm-ra/src/view/HomeView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/AssetCartographyView.tsx",["92"],"import 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport React, { Component } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { InputText } from 'primereact/inputtext';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Button } from 'primereact/button';\nimport { OverlayPanel } from 'primereact/overlaypanel';\nimport { Tooltip } from 'primereact/tooltip';\nimport AssetController from '../controller/AssetController';\nimport CategoryController from '../controller/CategoryController';\nimport Owner from '../model/Owner';\nimport OwnerContrller from '../controller/OwnerController';\n\nexport default class AssetCartographyView extends Component{\n    private assetsController = new AssetController();\n    private categoryController = new CategoryController();\n    private ownerController = new OwnerContrller();\n    private initialAsset: any;\n    private op: any;\n    state: any;\n\n    constructor(props: any){\n        super(props);\n\n        this.state = {\n            assets: null,\n            categories: null,\n            owners: null,\n            editingOwner: new Owner(),\n            loading: true\n        }\n    }\n\n    async componentDidMount(){\n        this.setState({\n            assets: await this.assetsController.getAssetsForEditTable(),\n            categories: await this.categoryController.getCategpries(),\n            owners: await this.ownerController.getOwners(),\n            loading: false\n        });\n\n        this.onRowEditCancel = this.onRowEditCancel.bind(this);\n        this.categoryTemplate = this.categoryTemplate.bind(this);\n    }\n\n    onRowEditInit(event: any){\n        this.initialAsset={...this.state.assets[event.index]};\n        this.setState({editingAsset: this.initialAsset});\n    }\n\n    onRowEditCancel(event: any) {\n        let assets = this.state.assets;\n        assets[event.index] = this.initialAsset;\n\n        this.setState({ assets: assets });\n    }\n\n    async onRowEditSave(event: any){\n        const res = await this.assetsController.updateAsset(this.state.editingAsset);\n        if(res){\n            this.reloadAssets();\n        }\n        else{\n            this.onRowEditCancel(event);\n        }\n    }\n\n    async onOwnerEditSave(owner: Owner){\n        const res = await this.ownerController.createOwner(owner);\n        if(res){\n            this.setState({owners: await this.ownerController.getOwners()});    \n            this.op.hide();\n        }\n    }\n\n    async reloadAssets(){\n        this.setState({loading: true});\n        this.setState({ \n            assets: await this.assetsController.getAssetsForEditTable(),\n            loading: false\n        });\n}\n\n    inputTextEditor(asset: any, field: string) {\n        return <InputText type=\"text\" placeholder={field} defaultValue={asset[field]}\n        onChange={(e) => this.state.editingAsset[field]=e.currentTarget.value}/>\n    }\n\n    inputCategoryEditor(asset: any) {\n        return (\n            <Dropdown optionLabel=\"name\" value={this.state.editingAsset.category} options={this.state.categories} \n            appendTo={document.body} placeholder=\"category\"\n            onChange={(e) => {\n                let editingAsset = this.state.editingAsset;\n                editingAsset.category = e.value;\n                this.setState({editingAsset: editingAsset})}}/>\n        )\n    }\n\n    inputLocationEditor(asset: any) {\n        return (\n            <Dropdown optionLabel=\"name\" optionValue=\"name\" value={this.state.editingAsset.location} options={this.state.assets}\n            appendTo={document.body} placeholder=\"location\"\n            onChange={(e) => {\n                let editingAsset = this.state.editingAsset;\n                editingAsset.location = e.value;\n                this.setState({editingAsset: editingAsset})}}/>\n        )\n    }\n    \n    inputOwnerEditor(asset: any) {\n        return (\n            <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                <Dropdown optionLabel=\"name\" value={this.state.editingAsset.owner} options={this.state.owners} \n                appendTo={document.body} placeholder=\"owner\"\n                onChange={(e) => {\n                    let editingAsset = this.state.editingAsset;\n                    editingAsset.owner = e.value;\n                    this.setState({editingAsset: editingAsset})}}/> \n                <Button label=\"Create new owner\" className=\"p-button-text p-button-sm\" onClick={(e) => this.op.toggle(e)} />\n\n                <OverlayPanel showCloseIcon  ref={(el) => this.op = el}>\n                    <div style={{display:\"flex\", flexDirection:\"column\"}}>\n                        <h5>New owner</h5>\n                        <span className=\"p-float-label\">\n                            <InputText id=\"ownerName\" value={this.state.editingOwner.name}\n                            onChange={(e) => this.setState({editingOwner: {...this.state.editingOwner, name: e.currentTarget.value}})}/>\n                            <label htmlFor=\"ownerName\">Name</label>\n                        </span>\n                        <span className=\"p-float-label p-my-5\">\n                            <InputText id=\"ownerEmail\" value={this.state.editingOwner.email}\n                            onChange={(e) => this.setState({editingOwner: {...this.state.editingOwner, email: e.currentTarget.value}})}/>\n                            <label htmlFor=\"ownerEmail\">Email</label>\n                        </span>\n                        <div style={{display:\"flex\", flexDirection:\"row\", width:\"100%\"}}>\n                            <Button label=\"Create\" className=\"p-button-sm\" onClick={(e) => this.onOwnerEditSave(this.state.editingOwner)}/>\n                            <Button label=\"Cancel\" className=\"p-button-text p-button-sm\" onClick={(e) => this.op.hide()}/>\n                        </div>\n                    </div>\n                </OverlayPanel>\n            </div>\n        )\n    }\n\n    categoryTemplate(asset: any){\n        return asset.category.name;\n    }\n\n    ownerTemplate(asset: any){\n        return (\n            <div>\n                <div className=\"p-text-normal\">{asset.owner.name}</div>\n                <div className=\"p-text-light\">{asset.owner.email}</div>\n            </div>\n        );\n    }\n\n    render(){\n        const header = (\n            <h1 className=\"p-text-light p-m-0\">Asset Chartography tool</h1>\n        )\n        const locationHeader = (\n            <div style={{width:\"auto\"}}>\n                <Tooltip target=\".customClassName\" mouseTrack mouseTrackLeft={10} />\n                <div className=\"customClassName\" data-pr-tooltip=\"Located/Installed/Saved at..\">Location</div>\n            </div>\n        )\n        return (\n            <div style={{width:\"100%\", height:\"100%\"}} className=\"p-card\">\n                <DataTable loading={this.state.loading} value={this.state.assets} editMode=\"row\" sortMode=\"multiple\" className=\"p-datatable-striped\"\n                resizableColumns columnResizeMode=\"fit\" header={header}\n                onRowEditInit={(e) => this.onRowEditInit(e)} onRowEditCancel={(e) => this.onRowEditCancel(e)} onRowEditSave={(e) => this.onRowEditSave(e)}>\n                    <Column field=\"name\" header=\"Asset Name\" editor={(e) => this.inputTextEditor(e.rowData, \"name\")}/>\n                    <Column field=\"description\" header=\"Description\" editor={(e) => this.inputTextEditor(e.rowData, \"description\")}/>\n                    <Column field=\"category\" header=\"Category\" body={this.categoryTemplate} editor={(e) => this.inputCategoryEditor(e.rowData)}/>\n                    <Column field=\"owner\" header=\"Owner\" body={this.ownerTemplate} editor={(e) => this.inputOwnerEditor(e.rowData)}/>\n                    <Column field=\"location\" header={locationHeader} editor={(e) => this.inputLocationEditor(e.rowData)}/>\n                    <Column rowEditor headerStyle={{ width: '7rem' }} bodyStyle={{ textAlign: 'center' }}></Column>\n                </DataTable>\n            </div>\n        );\n    }\n}","/mnt/f/Projects/cramm-ra/src/view/AssetEvaluationView.tsx",[],"/mnt/f/Projects/cramm-ra/src/view/ThreadEvaluationView.tsx",["93","94","95"],"/mnt/f/Projects/cramm-ra/src/view/ResultTableView.tsx",["96","97","98"],"import 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport {Component} from \"react\";\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {OverlayPanel} from 'primereact/overlaypanel';\nimport ThreatController from \"../controller/ThreatController\";\nimport Threat from \"../model/Threat\";\nimport AssetController from \"../controller/AssetController\";\nimport Asset from \"../model/Asset\";\nimport {Button} from \"primereact/button\";\nimport {ThreatLevels} from \"../model/ThreatLevels\";\nimport {VulLevels} from \"../model/VulLevels\";\nimport Scales from \"../model/Scales\";\n\nexport default class ResultTableView extends Component{\n    private threatController: ThreatController = new ThreatController();\n    private assetController: AssetController = new AssetController();\n    private scales: Scales = new Scales();\n\n    state: any;\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            threats: null,\n            loading: true\n        }\n\n        this.assetEvac = this.assetEvac.bind(this);\n        this.dangerLevel = this.dangerLevel.bind(this);\n        this.hazardLevel = this.hazardLevel.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState({\n            threats: await this.threatController.getThreats(),\n            loading: false\n        })\n    }\n\n    assetEvac(threat: Threat){\n        // let asset: Asset = threat.asset;\n        // let op: any;\n        // return(\n        //     <div className={\"p-d-flex p-ai-center\"}>\n        //         {this.assetController.getOverallScore(asset)}\n        //         <Button icon=\"pi pi-search\" className=\"p-button-rounded p-button-text p-mx-2\"\n        //                 onClick={(e) => op.toggle(e)}/>\n        //         <OverlayPanel showCloseIcon ref={(el) => op = el}>\n        //             <div className={\"p-d-flex p-flex-column\"}>\n        //                 <table style={{width:\"auto\"}}>\n        //                     <tr>\n        //                         <th>Asset Evaluation Score</th>\n        //                         <th>{this.assetController.getOverallScore(asset)}</th>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>Internal Reveal</td>\n        //                         <td>{asset.confInternal}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>External Reveal</td>\n        //                         <td>{asset.confExternal}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <th>Confidentiality Score</th>\n        //                         <th>{this.assetController.getConfidentialityScore(asset)}</th>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>Some destruction</td>\n        //                         <td>{asset.intSome}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>Total destruction</td>\n        //                         <td>{asset.intTotal}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <th>Integrity Score</th>\n        //                         <th>{this.assetController.getIntegrityScore(asset)}</th>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>30 minutes</td>\n        //                         <td>{asset.av30m}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>1 hour</td>\n        //                         <td>{asset.av1h}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>1 day</td>\n        //                         <td>{asset.av1d}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>2 days</td>\n        //                         <td>{asset.av2d}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>1 week</td>\n        //                         <td>{asset.av1w}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <td>1 month</td>\n        //                         <td>{asset.av1m}</td>\n        //                     </tr>\n        //                     <tr>\n        //                         <th>Availability Score</th>\n        //                         <th>{this.assetController.getAvailabilityScore(asset)}</th>\n        //                     </tr>\n        //                 </table>\n        //             </div>\n        //         </OverlayPanel>\n        //     </div>\n        // );\n        return (\"dd\")\n    }\n\n    threatLevel(threat: Threat){\n        return ThreatLevels[threat.threatLevel];\n    }\n\n    vulLevel(threat: Threat){\n        return VulLevels[threat.vulLevel];\n    }\n\n    dangerLevel(threat: Threat){\n        return this.threatController.getDangerLevel(threat);\n    }\n\n    hazardLevel(threat: Threat) {\n        return this.scales.getHazardScale(this.threatController.getDangerLevel(threat));\n    }\n\n    render(){\n        return(\n            <DataTable loading={this.state.loading} value={this.state.threats}\n                       className=\"p-datatable-sm p-datatable-striped\">\n                <Column field={\"asset.name\"} header={\"Asset Name\"}/>\n                <Column field={\"asset.description\"} header={\"Asset Description\"}/>\n                <Column body={this.assetEvac} header={\"Asset Evaluation Score\"}/>\n                <Column field={\"name\"} header={\"Threat Name\"}/>\n                <Column body={this.threatLevel} header={\"Threat Level\"}/>\n                <Column body={this.vulLevel} header={\"Vulnerability Level\"}/>\n                <Column body={this.dangerLevel} header={\"Grade of Danger\"}/>\n                <Column body={this.hazardLevel} header={\"Level of Danger\"}/>\n            </DataTable>\n        );\n    }\n}","/mnt/f/Projects/cramm-ra/src/controller/OwnerController.ts",["99"],"import FirebaseDAO from \"../dao/FirebaseDAO\";\nimport Owner from \"../model/Owner\";\n\nexport default class OwnerContrller{\n    dao = new FirebaseDAO();\n\n    public async getOwners(){\n        return await this.dao.getOwners();\n    }\n\n    public createOwner(owner: Owner){\n        const emailRegEx = /^\\S+\\@\\S+(\\.\\S*)+$/;\n        console.log(emailRegEx.test(owner.email));\n        if(owner.name.length > 0 && emailRegEx.test(owner.email)){\n            delete owner.id;\n            this.dao.addOwner(owner);\n            return true;\n        }\n        return false;\n    }\n}","/mnt/f/Projects/cramm-ra/src/model/VulLevels.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Owner.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/CategoryController.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Scales.ts",[],"/mnt/f/Projects/cramm-ra/src/model/ThreatLevels.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/ThreatController.ts",[],"/mnt/f/Projects/cramm-ra/src/controller/AssetController.tsx",[],"/mnt/f/Projects/cramm-ra/src/model/HazardScale.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Threat.ts",[],"/mnt/f/Projects/cramm-ra/src/dao/FirebaseDAO.ts",["100","101","102"],"/mnt/f/Projects/cramm-ra/src/model/Asset.ts",[],"/mnt/f/Projects/cramm-ra/src/model/Category.ts",[],"/mnt/f/Projects/cramm-ra/src/model/CategoryThreat.ts",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":91,"column":26,"nodeType":"109","endLine":91,"endColumn":49},{"ruleId":"110","severity":1,"message":"111","line":10,"column":9,"nodeType":"112","messageId":"113","endLine":10,"endColumn":17},{"ruleId":"110","severity":1,"message":"114","line":20,"column":8,"nodeType":"112","messageId":"113","endLine":20,"endColumn":16},{"ruleId":"110","severity":1,"message":"115","line":22,"column":10,"nodeType":"112","messageId":"113","endLine":22,"endColumn":17},{"ruleId":"110","severity":1,"message":"116","line":9,"column":9,"nodeType":"112","messageId":"113","endLine":9,"endColumn":21},{"ruleId":"110","severity":1,"message":"117","line":13,"column":8,"nodeType":"112","messageId":"113","endLine":13,"endColumn":13},{"ruleId":"110","severity":1,"message":"118","line":14,"column":9,"nodeType":"112","messageId":"113","endLine":14,"endColumn":15},{"ruleId":"119","severity":1,"message":"120","line":12,"column":33,"nodeType":"121","messageId":"122","endLine":12,"endColumn":34,"suggestions":"123"},{"ruleId":"110","severity":1,"message":"124","line":177,"column":17,"nodeType":"112","messageId":"113","endLine":177,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":197,"column":18,"nodeType":"127","messageId":"128","endLine":200,"endColumn":10},{"ruleId":"125","severity":1,"message":"126","line":211,"column":18,"nodeType":"127","messageId":"128","endLine":214,"endColumn":10},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","@typescript-eslint/no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'Category' is defined but never used.","'waitFor' is defined but never used.","'OverlayPanel' is defined but never used.","'Asset' is defined but never used.","'Button' is defined but never used.","no-useless-escape","Unnecessary escape character: \\@.","Literal","unnecessaryEscape",["131","132"],"'asset' is assigned a value but never used.","no-unreachable","Unreachable code.","BlockStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"messageId":"133","fix":"134","desc":"135"},{"messageId":"136","fix":"137","desc":"138"},"removeEscape",{"range":"139","text":"140"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"141","text":"142"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[300,301],"",[300,300],"\\"]